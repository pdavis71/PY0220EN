!pip install yfinance
!pip install pandas
!pip install requests
!pip install bs4
!pip install plotly

import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup
import plotly.graph_objects as go
from plotly.subplots import make_subplots

tesla = yf.Ticker("TSLA")

tesla_data = tesla.history(period="max")

tesla_data.reset_index(inplace=True)
tesla_data.head()

html_data = 'https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue'
page = requests.get(html_data)

soup = BeautifulSoup(page.text, 'html.parser')

tag_object=soup.title
print("tag object:",tag_object)

tables = soup.find('table')

tesla_quarterly_revenue = pd.DataFrame(columns=["Date", "Revenue"])

for row in soup.find("tbody").find_all("tr"):
    col = row.find_all("td")
    if (col != []):
        date = col[0].text
        revenue = col[1].text.replace("$", "").replace(",", "")
        tesla_quarterly_revenue = tesla_quarterly_revenue.append({"Date":date, "Revenue":revenue}, ignore_index=True)

tesla_quarterly_revenue

pd.set_option("display.max_rows", None, "display.max_columns", None)
tesla_quarterly_revenue

tesla_quarterly_revenue.dropna(subset = ["Revenue"], inplace=True)

tesla_quarterly_revenue

tesla_quarterly_revenue.tail()

gme = yf.Ticker("GME")

gme_data = gme.history(period="max")

gme_data.head()

gme_data.tail()

gme_data.reset_index(inplace=True)
gme_data.head()

html_data = 'https://www.macrotrends.net/stocks/charts/GME/gamestop/revenue'
page = requests.get(html_data)

soup = BeautifulSoup(page.text, 'html.parser')

gme_quarterly_revenue = pd.DataFrame(columns=["Date", "Revenue"])

for row in soup.find("tbody").find_all("tr"):
    col = row.find_all("td")
    if (col != []):
        date = col[0].text
        revenue = col[1].text.replace("$", "").replace(",", "")
        gme_quarterly_revenue = tesla_revenue.append({"Date":date, "Revenue":revenue}, ignore_index=True)

gme_quarterly_revenue

gme_quarterly_revenue.tail()

def make_graph(tesla_data, tesla_quarterly_revenue, tesla):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing = .3)
    fig.add_trace(go.Scatter(x=pd.to_datetime(tesla_data.Date, infer_datetime_format=True), y=tesla_data.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(tesla_quarterly_revenue.Date, infer_datetime_format=True), y=tesla_quarterly_revenue.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
    fig.update_layout(showlegend=False,
    height=900,
    title=tesla,
    xaxis_rangeslider_visible=True)
    fig.show()
    
#nothing shows
    
def make_graph(gme_data, gme_quarterly_revenue, gme):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing = .3)
    fig.add_trace(go.Scatter(x=pd.to_datetime(gme_data.Date, infer_datetime_format=True), y=gme_data.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(gme_quarterly_revenue.Date, infer_datetime_format=True), y=gme_quarterly_revenue.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
    fig.update_layout(showlegend=False,
    height=900,
    title=gme,
    xaxis_rangeslider_visible=True)
    fig.show()

#nothing shows

